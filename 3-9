public class ArmstrongThread extends Thread {
    @Override
    public void run() {
        System.out.println("ArmstrongThread started");
        // Logic for Armstrong numbers
        for (int i = 1; i <= 1000; i++) {
            if (isArmstrong(i)) {
                System.out.println(i + " is an Armstrong number");
            }
        }
        System.out.println("ArmstrongThread completed");
    }

    private boolean isArmstrong(int num) {
        int originalNum, remainder, result = 0;
        originalNum = num;

        while (originalNum != 0) {
            remainder = originalNum % 10;
            result += Math.pow(remainder, 3);
            originalNum /= 10;
        }

        return result == num;
    }

    public static void main(String[] args) {
        ArmstrongThread t1 = new ArmstrongThread();
        FibonacciThread t2 = new FibonacciThread();

        t1.start();
        t2.start();
    }
}

class FibonacciThread extends Thread {
    @Override
    public void run() {
        System.out.println("FibonacciThread started");
        // Logic for Fibonacci series
        int n = 10, t1 = 0, t2 = 1;
        System.out.print("Fibonacci Series: ");
        for (int i = 1; i <= n; ++i) {
            System.out.print(t1 + " ");
            int sum = t1 + t2;
            t1 = t2;
            t2 = sum;
        }
        System.out.println();
        System.out.println("FibonacciThread completed");
    }
}
